generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin // Role for the teacher/administrator
  teacher // Role for the teacher
}

enum Grade {
  K2 // Kindergarten 2
  K3 // Kindergarten 3
}

model Newsletter {
  id        String   @id @default(uuid())
  title     String // Newsletter title, e.g., "October 2024 Newsletter"
  month     DateTime // Date associated with the newsletter (month of publication)
  grade     Grade    @default(K2) // Grade level associated with the newsletter
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vocabularies Vocabulary[] // Relation 1:N with Vocabulary
  topics       Topic[] // Relation 1:N with Topic
  videos       Video[] // Relation 1:N with Video
  notes        Note[] // Relation 1:N with Note

  socialSkillId String?      @unique // Foreign key to associate with SocialSkill
  socialSkill   SocialSkill? @relation(fields: [socialSkillId], references: [id], onDelete: Cascade) // Relation 1:1 with SocialSkill (optional)
  playlistId    String?      @unique // Foreign key to associate with Playlist
  playlist      Playlist?    @relation(fields: [playlistId], references: [id], onDelete: Cascade) // Relation 1:1 with Playlist (optional)

  @@map("newsletters")
}

model SocialSkill {
  id         String      @id @default(uuid())
  skill      String // Skill name, e.g., "Follow Directions"
  activity   String // Activity description
  newsletter Newsletter? // Relation 1:1 with Newsletter (optional)

  @@map("social_skills")
}

model Note {
  id           String     @id @default(uuid())
  content      String // Content of the note
  newsletterId String // Foreign key to associate with Newsletter
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade) // Relation 1:N with Newsletter

  @@map("notes")
}

model Vocabulary {
  id            String     @id @default(uuid())
  word          String // English word
  pronunciation String // Spanish pronunciation
  newsletterId  String
  newsletter    Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)

  @@map("vocabularies")
}

model Topic {
  id           String     @id @default(uuid())
  name         String // Topic name (e.g., "Colors", "Shapes")
  newsletterId String
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)

  @@map("topics")
}

model Video {
  id           String     @id @default(uuid())
  title        String // Video title
  by           String // Video creator
  url          String // Video URL
  newsletterId String
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)

  @@map("videos")
}

model Playlist {
  id         String      @id @default(uuid())
  title      String? // Playlist title (e.g., "October 2024 Videos")
  url        String // YouTube playlist URL
  newsletter Newsletter? // Relation 1:1 with Newsletter (optional)

  @@map("playlists")
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String // Password for authentication
  role     Role    @default(admin) // Role of the user (default: admin)
  isActive Boolean @default(true) // User status (active/inactive)

  @@map("users")
}

model Menu {
  id          String  @id @default(uuid())
  title       String
  preparation String
  isActive    Boolean @default(false)

  menuImageId String    @unique
  menuImage   MenuImage @relation(fields: [menuImageId], references: [id], onDelete: Cascade)

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  weekdayId String?  @unique
  weekday   Weekday? @relation(fields: [weekdayId], references: [id])

  @@map("menus")
}

model MenuImage {
  id  String @id @default(uuid())
  url String

  menu Menu?

  @@map("menu_images")
}

model Weekday {
  id    String @id @default(uuid())
  name  String @unique // monday, tuesday, wednesday, thursday, friday
  order Int
  menu  Menu?

  @@map("weekdays")
}

model Ingredient {
  id       String @id @default(uuid())
  name     String
  quantity String
  calories Float
  protein  Float
  lipids   Float
  carbs    Float
  menuId   String
  menu     Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@map("ingredients")
}

model Holiday {
  id   String   @id @default(uuid())
  name String // Name of the holiday
  date DateTime // Date of the holiday

  @@map("holidays")
}
